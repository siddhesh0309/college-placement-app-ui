import time
import os
import numpy as np
import pandas as pd
from openpyxl import load_workbook

# File paths (Update with actual paths)
template_file = "template.xlsm"  # Write directly into this file
missing_pan_output = "missing_pan_customers.xlsx"  # Customers with missing PAN

# Ensure Excel files are not open
for file in [template_file, missing_pan_output]:
    if os.path.exists(file):
        try:
            os.rename(file, file)  # Try renaming to check if it's open
        except PermissionError:
            print(f"‚ùå Error: Close '{file}' before running the script.")
            exit()

# Load old and new Excel files
print("üîÑ Loading Excel files...")
df_old = pd.read_excel("last_year_data.xlsm", sheet_name="Account Holder", engine="openpyxl",
                       usecols=["Customer ID", "Address", "City_Town", "Postal_Code", "State_Code", "Country_Code"])
df_new = pd.read_excel("current_data.xlsx", sheet_name="Account Holder", engine="openpyxl")

print(f"‚úÖ Files loaded successfully. New: {len(df_new)} rows, Old: {len(df_old)} rows.")

# Start time tracking
start_time = time.time()

# Merge for address updates
df_updated = df_new.merge(df_old, on=["Customer ID", "Address"], how="left", suffixes=("", "_old"))

# Update specific columns
for col in ["City_Town", "Postal_Code", "State_Code", "Country_Code"]:
    df_updated[col] = df_updated[col].combine_first(df_updated[col + "_old"])
df_updated.drop(columns=[col + "_old" for col in ["City_Town", "Postal_Code", "State_Code", "Country_Code"]], inplace=True)

# PAN Validation (Assign Dummy PAN)
df_updated["PAN"] = df_updated["PAN"].fillna("")
valid_dummy_pan_mask = (
    (df_updated["PAN"] == "") &
    df_updated["Father's Name"].notna() &
    df_updated["Birth Date"].notna() &
    df_updated["Identification Number"].notna()
)
df_updated.loc[valid_dummy_pan_mask, "PAN"] = "AAAAA9999A"

# Extract missing PAN customers
missing_pan_customers = df_updated[(df_updated["PAN"] == "") & ~valid_dummy_pan_mask]

# Define columns dynamically
foreign_tin_columns = ["Foreign_TIN"] + [f"Foreign_TIN{i}" for i in range(2, 9)]
tin_issuing_columns = ["TIN_Issuing_Country"] + [f"TIN_Issuing_Country{i}" for i in range(2, 9)]
country_resident_columns = ["Country_of_Resident"] + [f"Country_of_Resident{i}" for i in range(2, 9)]

# Ensure TIN Issuing Country matches Country of Resident
for i in range(8):
    tin_col = tin_issuing_columns[i]
    country_col = country_resident_columns[i]
    if tin_col in df_updated.columns and country_col in df_updated.columns:
        df_updated[tin_col] = df_updated[tin_col].combine_first(df_updated[country_col])

# Assign "AAAAAAAAA" if Foreign_TIN is missing but TIN_Issuing_Country is present
for i in range(8):
    tin_col = tin_issuing_columns[i]
    foreign_tin_col = foreign_tin_columns[i]
    if tin_col in df_updated.columns and foreign_tin_col in df_updated.columns:
        condition = df_updated[tin_col].notna() & df_updated[foreign_tin_col].isna()
        df_updated.loc[condition, foreign_tin_col] = "AAAAAAAAA"

# Handle Account Treatment = "P" and SC = "N"
mask_account_treatment = (df_updated["Account Treatment"] == "P") & (df_updated["SC"] == "N")
for i in range(8):
    tin_col = tin_issuing_columns[i]
    foreign_tin_col = foreign_tin_columns[i]
    if tin_col in df_updated.columns and foreign_tin_col in df_updated.columns:
        removal_condition = mask_account_treatment & (df_updated[foreign_tin_col] == "AAAAAAAAA")
        df_updated.loc[removal_condition, [foreign_tin_col, tin_col]] = np.nan

# Handle Account Treatment = "P" and SC = "Y"
mask_sc_y = (df_updated["Account Treatment"] == "P") & (df_updated["SC"] == "Y")
existing_foreign_tin_cols = [col for col in foreign_tin_columns if col in df_updated.columns]
if existing_foreign_tin_cols:
    sc_y_to_n_mask = mask_sc_y & df_updated[existing_foreign_tin_cols].apply(lambda row: (row == "AAAAAAAAA").any(), axis=1)
else:
    sc_y_to_n_mask = pd.Series([False] * len(df_updated), index=df_updated.index)

df_updated.loc[sc_y_to_n_mask, "SC"] = "N"
for i in range(8):
    tin_col = tin_issuing_columns[i]
    foreign_tin_col = foreign_tin_columns[i]
    if tin_col in df_updated.columns and foreign_tin_col in df_updated.columns:
        removal_condition = sc_y_to_n_mask & (df_updated[foreign_tin_col] == "AAAAAAAAA")
        df_updated.loc[removal_condition, [foreign_tin_col, tin_col]] = np.nan

# End time tracking
processing_time = round(time.time() - start_time, 2)
print(f"‚úÖ Data processing completed in {processing_time} seconds.")

# Save data to template.xlsm starting from row 9
print(f"üîÑ Writing data into '{template_file}' starting from row 9...")
try:
    workbook = load_workbook(template_file, keep_vba=True)
    sheet = workbook["Account Holder"]

    # Clear rows 9 onwards
    for row in sheet.iter_rows(min_row=9, max_row=sheet.max_row):
        for cell in row:
            cell.value = None

    # Write headers in row 9
    for col_idx, column_name in enumerate(df_updated.columns, start=1):
        sheet.cell(row=9, column=col_idx, value=column_name)

    # Write data starting from row 10
    for idx, row in df_updated.iterrows():
        for col_idx, value in enumerate(row, start=1):
            sheet.cell(row=idx + 10, column=col_idx, value=value)

    workbook.save(template_file)
    print(f"‚úÖ Data successfully written into '{template_file}' starting from row 9.")
except PermissionError:
    print(f"‚ùå Error: '{template_file}' is open in another program. Close it and try again.")
except Exception as e:
    print(f"‚ùå Unexpected error while writing data: {e}")

# Save missing PAN customers
if not missing_pan_customers.empty:
    print(f"üîÑ Saving missing PAN customers to '{missing_pan_output}'...")
    try:
        with pd.ExcelWriter(missing_pan_output, engine="openpyxl", mode="w") as writer:
            missing_pan_customers.to_excel(writer, index=False)
        print(f"‚úÖ Missing PAN customers saved in '{missing_pan_output}'.")
    except PermissionError:
        print(f"‚ùå Error: '{missing_pan_output}' is open in another program. Close it and try again.")

print("üéØ Process completed successfully!")
